1 - (22790/47)/((57737+7003)/49)
1 - ((22790/47)/((57737+7003)/49))
args(plot)
add2 <- function(a, b) {
a + b
}
add2(3,5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
above(x, 10)
above(x, 12)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
search()
help(search)
install.packages("github")
git
help(git)
??git
setwd("~/R/ProgrammingAssignment2")
function()
x
help(function)
function??
??function
()
x
solve()
help(solve)
matrix(2,3)
matrix(1:3,3,5)
solve(matrix(1:3,3,5))
solve(matrix(1:3,3,3))
matrix(1:3,3,3)
solve(matrix(1:3,3,3))
solve(matrix(1:2,2,2))
m <- matrix(1:3,3,3)
solve(m)
help(matrix)
help(solve)
solve(m)
m <- matrix(1:9,3,3)
solve(m)
m
m <- matrix(rnorm(5),3,3)
rnorm(5)
rnorm(9)
m <- matrix(rnorm(9),3,3)
solve(m)
m
solve(m) + m
solve(m) * m
m
solve(m) * m
class(m)
solve(m)m
solve(m)*m
m
m <- matrix(2:4,2,2)
m <- matrix(1:2,2,2)
m
solve(m)
help(matrix)
m <- matrix(c(3,3.5,3.2,3.6), 2, 2)
solve(m)
solve(m) * m
solve(m) %*% m
makeCacheMatrix <- function(x = matrix()) {
##This function creates a special "matrix" object that can cache its inverse.
cache <<- solve(x)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##From the README: This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above. If the inverse has already been calculated (and the matrix has not changed), then the `cachesolve` should retrieve the inverse from the cache.
if(x == cache) {
return(cache)
} else {
solve(x)
}
}
makeCacheMatrix <- function(x = matrix()) {
##This function creates a special "matrix" object that can cache its inverse.
cache <<- solve(x)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##From the README: This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above. If the inverse has already been calculated (and the matrix has not changed), then the `cachesolve` should retrieve the inverse from the cache.
if(x == cache) {
return(cache)
} else {
return(solve(x))
}
}
makeCacheMatrix(matrix(1:2,2,2))
makeCacheMatrix(matrix(c(3,3.5,3.2,3.6), 2, 2))
cacheSolve(matrix(c(3,3.5,3.2,3.6), 2, 2))
x == cache
matrix(c(3,3.5,3.2,3.6), 2, 2) == cache
y <- matrix(c(3,3.5,3.2,3.6), 2, 2)
cacheSolve(y)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##From the README: This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above. If the inverse has already been calculated (and the matrix has not changed), then the `cachesolve` should retrieve the inverse from the cache.
if(x == cache) {
print("This was already cached!")
return(cache)
} else {
return(solve(x))
print("We had to solve this one")
}
}
makeCacheMatrix <- function(x = matrix()) {
##This function creates a special "matrix" object that can cache its inverse.
cache <<- solve(x)
}
makeCacheMatrix(y)
cacheSolve(y)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##From the README: This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above. If the inverse has already been calculated (and the matrix has not changed), then the `cachesolve` should retrieve the inverse from the cache.
if(x == cache) {
print("This was already cached!")
return(cache)
} else {
print("We had to solve this one")
return(solve(x))
}
}
cacheSolve(y)
help(mapply)
mapply(mean, y)
mapply(sum, y)
as.vector(y)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(1:10))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean()
cachemean(cache)
function(solve)
cache
function(solve) cache
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1)
cachemean(1)
x$getmean
y$getmean()
y = NULL
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(2:5)
makeVector()
makeVector(4)
setmean <- function(mean) m <<- mean
function(mean) 2:5
y = c(10:20)
y$getmean()
m <- y$getmean()
get()
get(y)
help(get)
get(y, 1)
get(cache, 1)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- mackeVector(c(4:6))
a <- makeVector(c(4:6))
cachemean(a)
get <- function() m
cacheX <- function(solve) cache <<- solve
makeCacheMatrix <- function(x = matrix()) {
##This function creates a special "matrix" object that can cache its inverse.
n <- NULL
get <- function() x
inverse <- function(solve) i <<- solve()
}
makeCacheMatrix <- function(x = matrix()) {
##This function creates a special "matrix" object that can cache its inverse.
n <- NULL
get <- function() x
inverse <- function(solve) i <<- solve()
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##From the README: This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above. If the inverse has already been calculated (and the matrix has not changed), then the `cachesolve` should retrieve the inverse from the cache.
i <- x$inverse()
if(!is.null(m)) {
message("This was already cached!")
return(i)
} else {
print("We had to solve this one")
data <- x$get
i <- solve(data, ...)
x$solve(i)
}
}
make(CacheMatrix(m))
makeCacheMatrix(m)
m <- makeCacheMatrix()
m <- makeCacheMatrix(m)
cacheSolve(m)
x$inverse
makeCacheMatrix <- function(x = matrix()) {
##This function creates a special "matrix" object that can cache its inverse.
n <- NULL
get <- function() x
inverse <- function(solve) n <<- solve()
}
makeCacheMatrix <- function(x = matrix()) {
##This function creates a special "matrix" object that can cache its inverse.
n <- NULL
get <- function() x
inverse <- function(solve) n <<- solve()
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##From the README: This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above. If the inverse has already been calculated (and the matrix has not changed), then the `cachesolve` should retrieve the inverse from the cache.
n <- x$inverse()
if(!is.null(m)) {
message("This was already cached!")
return(n)
} else {
print("We had to solve this one")
data <- x$get
n <- solve(data, ...)
x$solve(i)
}
}
m <- makeCacheMatrix
cacheSolve(m)
trace()
trace(cacheSolve(m))
z <- matrix(2:4, 2, 2)
z <- matrix(2:5, 2, 2)
test <- makeCacheMatrix(z)
cacheSolve(test)
help(closure)
debug(cacheSolve(test))
x$inverse
z$inverse
solve(z)
z$get
cacheSolve(solve(z))
special <- makeCacheMatrix(z)
cacheSolve(special)
class(special)
makeCacheMatrix <- function(x = matrix()) {
##This function creates a special "matrix" object that can cache its inverse.
n <- NULL
get <- function() x
inverse <- function(solve) n <<- solve()
list(get = get, inverse = inverse)
}
z <- makeCacheMatrix(2:5, 2, 2)
z <- makeCacheMatrix(2:5)
z <- makeCacheMatrix(matrix(2:5, 2, 2)
)
class(z)
class(z$get)
z$get
z$solve
z$inverse
makeCacheMatrix <- function(x = matrix()) {
##This function creates a special "matrix" object that can cache its inverse.
n <- NULL
get <- function() x
cacheSolve <- function(solve) n <<- solve()
list(get = get, cacheSolve = cacheSolve)
}
z <- matrix(2:5, 2, 2)
z <- makeCacheMatrix(z)
z <- matrix(2:5, 2, 2)
z <- makeCacheMatrix(z)
makeCacheMatrix <- function(x = matrix()) {
##This function creates a special "matrix" object that can cache its inverse.
n <- NULL
get <- function() x
cacheSolve <- function(solve) n <<- solve()
cacheGet <- function() n
list(get = get, cacheSolve = cacheSolve, cacheGet = cacheGet)
}
z <- makeCacheMatrix(z)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##From the README: This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above. If the inverse has already been calculated (and the matrix has not changed), then the `cachesolve` should retrieve the inverse from the cache.
n <- x$cacheGet()
if(!is.null(n)) {
message("This was already cached!")
return(n)
} else {
print("We had to solve this one")
data <- x$get
n <- solve(data, ...)
x$solve(i)
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##From the README: This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above. If the inverse has already been calculated (and the matrix has not changed), then the `cachesolve` should retrieve the inverse from the cache.
n <- x$cacheGet()
if(!is.null(n)) {
message("This was already cached!")
return(n)
} else {
print("We had to solve this one")
data <- x$get()
n <- solve(data, ...)
x$solve(i)
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##From the README: This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above. If the inverse has already been calculated (and the matrix has not changed), then the `cachesolve` should retrieve the inverse from the cache.
n <- x$cacheGet()
if(!is.null(n)) {
message("This was already cached!")
return(n)
} else {
print("We had to solve this one")
data <- x$get()
n <- solve(data, ...)
x$cacheSolve(n)
n
}
}
cacheSolve(z)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##From the README: This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above. If the inverse has already been calculated (and the matrix has not changed), then the `cachesolve` should retrieve the inverse from the cache.
n <- x$cacheGet()
print(n)
if(!is.null(n)) {
message("This was already cached!")
return(n)
} else {
print("We had to solve this one")
data <- x$get()
n <- solve(data, ...)
x$cacheSolve(n)
n
}
}
cacheSolve(z)
